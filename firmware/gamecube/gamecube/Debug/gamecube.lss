
gamecube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a2c  00000ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800062  00800062  00000ac2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ed  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1e  00000000  00000000  00002f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001610  00000000  00000000  00003a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00005034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000825  00000000  00000000  000051a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d2  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006e9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	63 c0       	rjmp	.+198    	; 0xc8 <__ctors_end>
   2:	97 c0       	rjmp	.+302    	; 0x132 <__vector_1>
   4:	7c c0       	rjmp	.+248    	; 0xfe <__bad_interrupt>
   6:	7b c0       	rjmp	.+246    	; 0xfe <__bad_interrupt>
   8:	7a c0       	rjmp	.+244    	; 0xfe <__bad_interrupt>
   a:	79 c0       	rjmp	.+242    	; 0xfe <__bad_interrupt>
   c:	78 c0       	rjmp	.+240    	; 0xfe <__bad_interrupt>
   e:	77 c0       	rjmp	.+238    	; 0xfe <__bad_interrupt>
  10:	76 c0       	rjmp	.+236    	; 0xfe <__bad_interrupt>
  12:	75 c0       	rjmp	.+234    	; 0xfe <__bad_interrupt>
  14:	74 c0       	rjmp	.+232    	; 0xfe <__bad_interrupt>
  16:	73 c0       	rjmp	.+230    	; 0xfe <__bad_interrupt>
  18:	72 c0       	rjmp	.+228    	; 0xfe <__bad_interrupt>
  1a:	71 c0       	rjmp	.+226    	; 0xfe <__bad_interrupt>
  1c:	70 c0       	rjmp	.+224    	; 0xfe <__bad_interrupt>
  1e:	6f c0       	rjmp	.+222    	; 0xfe <__bad_interrupt>
  20:	6e c0       	rjmp	.+220    	; 0xfe <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	05 01       	movw	r0, r10
  24:	09 05       	cpc	r16, r9
  26:	a1 01       	movw	r20, r2
  28:	05 09       	sbc	r16, r5
  2a:	19 01       	movw	r2, r18
  2c:	29 10       	cpse	r2, r9
  2e:	15 00       	.word	0x0015	; ????
  30:	25 01       	movw	r4, r10
  32:	75 01       	movw	r14, r10
  34:	95 10       	cpse	r9, r5
  36:	81 02       	muls	r24, r17
  38:	05 01       	movw	r0, r10
  3a:	09 30       	cpi	r16, 0x09	; 9
  3c:	09 31       	cpi	r16, 0x19	; 25
  3e:	09 32       	cpi	r16, 0x29	; 41
  40:	09 33       	cpi	r16, 0x39	; 57
  42:	09 34       	cpi	r16, 0x49	; 73
  44:	09 35       	cpi	r16, 0x59	; 89
  46:	15 00       	.word	0x0015	; ????
  48:	26 ff       	sbrs	r18, 6
  4a:	00 75       	andi	r16, 0x50	; 80
  4c:	08 95       	ret
  4e:	06 81       	ldd	r16, Z+6	; 0x06
  50:	02 c0       	rjmp	.+4      	; 0x56 <usbDescriptorConfiguration+0x4>

00000052 <usbDescriptorConfiguration>:
  52:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
  62:	00 00 09 21 01 01 00 01 22 30 00 07 05 81 03 08     ...!...."0......
  72:	00 0a                                               ..

00000074 <usbDescriptorDevice>:
  74:	12 01 10 01 00 00 00 08 c0 16 dc 05 02 00 01 02     ................
  84:	00 01                                               ..

00000086 <usbDescriptorStringDevice>:
  86:	14 03 73 00 68 00 69 00 6e 00 65 00 77 00 61 00     ..s.h.i.n.e.w.a.
  96:	76 00 65 00                                         v.e.

0000009a <usbDescriptorStringVendor>:
  9a:	2a 03 65 00 6c 00 65 00 63 00 74 00 72 00 69 00     *.e.l.e.c.t.r.i.
  aa:	63 00 65 00 78 00 70 00 6c 00 6f 00 69 00 74 00     c.e.x.p.l.o.i.t.
  ba:	73 00 2e 00 6e 00 65 00 74 00                       s...n.e.t.

000000c4 <usbDescriptorString0>:
  c4:	04 03 09 04                                         ....

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf e5       	ldi	r28, 0x5F	; 95
  ce:	d2 e0       	ldi	r29, 0x02	; 2
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	a0 e6       	ldi	r26, 0x60	; 96
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ec e2       	ldi	r30, 0x2C	; 44
  dc:	fa e0       	ldi	r31, 0x0A	; 10
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 36       	cpi	r26, 0x62	; 98
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	a2 e6       	ldi	r26, 0x62	; 98
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a1 3a       	cpi	r26, 0xA1	; 161
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	52 d2       	rcall	.+1188   	; 0x5a0 <main>
  fc:	95 c4       	rjmp	.+2346   	; 0xa28 <_exit>

000000fe <__bad_interrupt>:
  fe:	80 cf       	rjmp	.-256    	; 0x0 <__vectors>

00000100 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 100:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 102:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 104:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 106:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 108:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 10a:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 10c:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 10e:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 110:	09 c0       	rjmp	.+18     	; 0x124 <usbCrcLoopEntry>

00000112 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 112:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 114:	82 27       	eor	r24, r18

00000116 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 116:	97 95       	ror	r25
    ror     resCrcL
 118:	87 95       	ror	r24
    brcs    usbCrcNoXor
 11a:	10 f0       	brcs	.+4      	; 0x120 <usbCrcNoXor>
    eor     resCrcL, polyL
 11c:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 11e:	95 27       	eor	r25, r21

00000120 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 120:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 122:	c8 f3       	brcs	.-14     	; 0x116 <usbCrcBitLoop>

00000124 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 124:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 126:	a8 f3       	brcs	.-22     	; 0x112 <usbCrcByteLoop>

00000128 <usbCrcReady>:
usbCrcReady:
    ret
 128:	08 95       	ret

0000012a <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 12a:	ea df       	rcall	.-44     	; 0x100 <usbCrc16>
    st      ptr+, resCrcL
 12c:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 12e:	9d 93       	st	X+, r25
    ret
 130:	08 95       	ret

00000132 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 132:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 134:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 136:	cf 93       	push	r28

00000138 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 138:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 13a:	cb 9b       	sbis	0x19, 3	; 25
    brne    waitForJ        ; just make sure we have ANY timeout
 13c:	e9 f7       	brne	.-6      	; 0x138 <waitForJ>

0000013e <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 13e:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    foundK
 140:	09 c0       	rjmp	.+18     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 142:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    foundK
 144:	07 c0       	rjmp	.+14     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 146:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    foundK
 148:	05 c0       	rjmp	.+10     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 14a:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    foundK
 14c:	03 c0       	rjmp	.+6      	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 14e:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    foundK
 150:	01 c0       	rjmp	.+2      	; 0x154 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 152:	a3 c0       	rjmp	.+326    	; 0x29a <sofError>

00000154 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 154:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 156:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 15a:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 15c:	c5 57       	subi	r28, 0x75	; 117
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 15e:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 160:	cb 9b       	sbis	0x19, 3	; 25
    rjmp    haveTwoBitsK    ;2 [10]
 162:	02 c0       	rjmp	.+4      	; 0x168 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 164:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 166:	eb cf       	rjmp	.-42     	; 0x13e <waitForK>

00000168 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 168:	2f 93       	push	r18
    push    x1              ;2 [12]
 16a:	0f 93       	push	r16
    push    x2              ;2 [14]
 16c:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 16e:	09 b3       	in	r16, 0x19	; 25
    ldi     shift, 0xff     ;1 [18]
 170:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 172:	03 fb       	bst	r16, 3
    bld     shift, 0        ;1 [20]
 174:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 176:	4f 93       	push	r20
    push    cnt             ;2 [24]
 178:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 17a:	19 b3       	in	r17, 0x19	; 25
    ser     x3              ;1 [26] [inserted init instruction]
 17c:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 17e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 180:	03 fb       	bst	r16, 3
    bld     shift, 1        ;1 [29]
 182:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 184:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 186:	31 c0       	rjmp	.+98     	; 0x1ea <rxbit2>

00000188 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 188:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 18a:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 18c:	19 b3       	in	r17, 0x19	; 25
    ori     shift, 0x01 ;1 [18]
 18e:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 190:	28 c0       	rjmp	.+80     	; 0x1e2 <didUnstuff0>

00000192 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 192:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 194:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 196:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 198:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 19a:	09 b3       	in	r16, 0x19	; 25
    rjmp    didUnstuff1 ;2 [27]
 19c:	29 c0       	rjmp	.+82     	; 0x1f0 <didUnstuff1>

0000019e <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 19e:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1a0:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1a2:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1a4:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1a6:	19 b3       	in	r17, 0x19	; 25
    rjmp    didUnstuff2 ;2 [35]
 1a8:	2b c0       	rjmp	.+86     	; 0x200 <didUnstuff2>

000001aa <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1aa:	19 b3       	in	r17, 0x19	; 25
    andi    x3, ~0x08   ;1 [35]
 1ac:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 1ae:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 1b0:	2a c0       	rjmp	.+84     	; 0x206 <didUnstuff3>

000001b2 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 1b2:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 1b4:	09 b3       	in	r16, 0x19	; 25
    ori     shift, 0x10 ;1 [42]
 1b6:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1b8:	2c c0       	rjmp	.+88     	; 0x212 <didUnstuff4>

000001ba <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1ba:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1bc:	19 b3       	in	r17, 0x19	; 25
    ori     shift, 0x20 ;1 [50]
 1be:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1c0:	2f c0       	rjmp	.+94     	; 0x220 <didUnstuff5>

000001c2 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1c2:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1c4:	09 b3       	in	r16, 0x19	; 25
    ori     shift, 0x40 ;1 [58]
 1c6:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1c8:	32 c0       	rjmp	.+100    	; 0x22e <didUnstuff6>

000001ca <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1ca:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1cc:	09 b3       	in	r16, 0x19	; 25
    st      y+, x3      ;2 [3] store data
 1ce:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1d0:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1d2:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1d4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1d6:	13 fb       	bst	r17, 3
    bld     shift, 0    ;1 [8]
 1d8:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1da:	19 b3       	in	r17, 0x19	; 25
    andi    x2, USBMASK ;1 [10]
 1dc:	18 78       	andi	r17, 0x88	; 136
    breq    se0         ;1 [11] SE0 check for bit 1
 1de:	c9 f1       	breq	.+114    	; 0x252 <se0>
    andi    shift, 0xf9 ;1 [12]
 1e0:	29 7f       	andi	r18, 0xF9	; 249

000001e2 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1e2:	91 f2       	breq	.-92     	; 0x188 <unstuff0>
    eor     x1, x2      ;1 [14]
 1e4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1e6:	03 fb       	bst	r16, 3
    bld     shift, 1    ;1 [16]
 1e8:	21 f9       	bld	r18, 1

000001ea <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1ea:	09 b3       	in	r16, 0x19	; 25
    andi    shift, 0xf3 ;1 [18]
 1ec:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 1ee:	89 f2       	breq	.-94     	; 0x192 <unstuff1>

000001f0 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 1f0:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 1f2:	58 f1       	brcs	.+86     	; 0x24a <overflow>
    eor     x2, x1      ;1 [22]
 1f4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 1f6:	13 fb       	bst	r17, 3
    bld     shift, 2    ;1 [24]
 1f8:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 1fa:	19 b3       	in	r17, 0x19	; 25
    andi    shift, 0xe7 ;1 [26]
 1fc:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 1fe:	79 f2       	breq	.-98     	; 0x19e <unstuff2>

00000200 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 200:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 202:	03 fb       	bst	r16, 3
    bld     shift, 3    ;1 [30]
 204:	23 f9       	bld	r18, 3

00000206 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 206:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 208:	81 f2       	breq	.-96     	; 0x1aa <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 20a:	09 b3       	in	r16, 0x19	; 25
    eor     x2, x1      ;1 [34]
 20c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 20e:	13 fb       	bst	r17, 3
    bld     shift, 4    ;1 [36]
 210:	24 f9       	bld	r18, 4

00000212 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 212:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 214:	71 f2       	breq	.-100    	; 0x1b2 <unstuff4>
    nop2                ;2 [40]
 216:	00 c0       	rjmp	.+0      	; 0x218 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 218:	19 b3       	in	r17, 0x19	; 25
    eor     x1, x2      ;1 [42]
 21a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 21c:	03 fb       	bst	r16, 3
    bld     shift, 5    ;1 [44]
 21e:	25 f9       	bld	r18, 5

00000220 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 220:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 222:	59 f2       	breq	.-106    	; 0x1ba <unstuff5>
    nop2                ;2 [48]
 224:	00 c0       	rjmp	.+0      	; 0x226 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 226:	09 b3       	in	r16, 0x19	; 25
    eor     x2, x1      ;1 [50]
 228:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 22a:	13 fb       	bst	r17, 3
    bld     shift, 6    ;1 [52]
 22c:	26 f9       	bld	r18, 6

0000022e <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 22e:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 230:	40 f2       	brcs	.-112    	; 0x1c2 <unstuff6>
    nop2                ;2 [56]
 232:	00 c0       	rjmp	.+0      	; 0x234 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 234:	19 b3       	in	r17, 0x19	; 25
    eor     x1, x2      ;1 [58]
 236:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 238:	03 fb       	bst	r16, 3
    bld     shift, 7    ;1 [60]
 23a:	27 f9       	bld	r18, 7

0000023c <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 23c:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 23e:	28 f6       	brcc	.-118    	; 0x1ca <rxLoop>

00000240 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 240:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 242:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 244:	19 b3       	in	r17, 0x19	; 25
    nop                 ;1 [66]
 246:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 248:	f9 cf       	rjmp	.-14     	; 0x23c <didUnstuff7>

0000024a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 24a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 24c:	1a bf       	out	0x3a, r17	; 58

0000024e <ignorePacket>:
ignorePacket:
    clr     token
 24e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 250:	19 c0       	rjmp	.+50     	; 0x284 <handleSetupOrOut>

00000252 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 252:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 254:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 256:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 258:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 25a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 25c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 25e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 260:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 262:	f9 f0       	breq	.+62     	; 0x2a2 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 264:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 266:	e9 f0       	breq	.+58     	; 0x2a2 <handleData>
    lds     shift, usbDeviceAddr;[17]
 268:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 26c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 26e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 270:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 272:	ed cf       	rjmp	.-38     	; 0x24e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 274:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 276:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 278:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 27a:	41 f1       	breq	.+80     	; 0x2cc <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 27c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 27e:	11 f0       	breq	.+4      	; 0x284 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 280:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 282:	29 f7       	brne	.-54     	; 0x24e <ignorePacket>

00000284 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 284:	00 93 89 00 	sts	0x0089, r16	; 0x800089 <usbCurrentTok>

00000288 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 288:	3f 91       	pop	r19
 28a:	4f 91       	pop	r20
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	2f 91       	pop	r18
 292:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 294:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 296:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 298:	4f cf       	rjmp	.-354    	; 0x138 <waitForJ>

0000029a <sofError>:
sofError:
    POP_RETI                    ;macro call
 29a:	cf 91       	pop	r28
 29c:	cf bf       	out	0x3f, r28	; 63
 29e:	cf 91       	pop	r28
    reti
 2a0:	18 95       	reti

000002a2 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2a2:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <usbCurrentTok>
    tst     shift               ;[20]
 2a6:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2a8:	79 f3       	breq	.-34     	; 0x288 <doReturn>
    lds     x2, usbRxLen        ;[22]
 2aa:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <usbRxLen>
    tst     x2                  ;[24]
 2ae:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2b0:	69 f5       	brne	.+90     	; 0x30c <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2b2:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2b4:	6a f1       	brmi	.+90     	; 0x310 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2b6:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2ba:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2be:	10 91 84 00 	lds	r17, 0x0084	; 0x800084 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2c2:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2c4:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2c6:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2ca:	22 c0       	rjmp	.+68     	; 0x310 <sendAckAndReti>

000002cc <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2cc:	00 91 87 00 	lds	r16, 0x0087	; 0x800087 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2d0:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2d2:	e4 f4       	brge	.+56     	; 0x30c <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2d4:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2d6:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2d8:	49 f4       	brne	.+18     	; 0x2ec <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2da:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2de:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2e0:	19 c0       	rjmp	.+50     	; 0x314 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2e2:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2e6:	cb e6       	ldi	r28, 0x6B	; 107
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2ea:	18 c0       	rjmp	.+48     	; 0x31c <usbSendAndReti>

000002ec <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2ec:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2f4:	00 93 76 00 	sts	0x0076, r16	; 0x800076 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2f8:	c7 e7       	ldi	r28, 0x77	; 119
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <usbSendAndReti>

000002fe <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 2fe:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 300:	a8 f4       	brcc	.+42     	; 0x32c <doExorN1>
    subi    x4, 1               ;[-3]
 302:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 304:	a9 f4       	brne	.+42     	; 0x330 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 306:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 308:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 30a:	f9 cf       	rjmp	.-14     	; 0x2fe <stuffN1Delay>

0000030c <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 30c:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 30e:	03 c0       	rjmp	.+6      	; 0x316 <usbSendX3>

00000310 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 310:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 312:	01 c0       	rjmp	.+2      	; 0x316 <usbSendX3>

00000314 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 314:	43 2f       	mov	r20, r19

00000316 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 316:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 318:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 31a:	32 e0       	ldi	r19, 0x02	; 2

0000031c <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 31c:	1a b3       	in	r17, 0x1a	; 26
    ori     x2, USBMASK         ;[-11]
 31e:	18 68       	ori	r17, 0x88	; 136
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 320:	db 9a       	sbi	0x1b, 3	; 27
    out     USBDDR, x2          ;[-8] <--- acquire bus
 322:	1a bb       	out	0x1a, r17	; 26
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 324:	0b b3       	in	r16, 0x1b	; 27
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 326:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 328:	18 e8       	ldi	r17, 0x88	; 136
    push    x4                  ;[-4]
 32a:	5f 93       	push	r21

0000032c <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 32c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 32e:	56 e0       	ldi	r21, 0x06	; 6

00000330 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 330:	0b bb       	out	0x1b, r16	; 27
    ror     shift               ;[01]
 332:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 334:	20 f4       	brcc	.+8      	; 0x33e <doExorN2>
    subi    x4, 1               ;[03]
 336:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 338:	21 f4       	brne	.+8      	; 0x342 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 33a:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 33c:	f9 cf       	rjmp	.-14     	; 0x330 <commonN1>

0000033e <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 33e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 340:	56 e0       	ldi	r21, 0x06	; 6

00000342 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 342:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 344:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 346:	0b bb       	out	0x1b, r16	; 27
    brcs    txBitloop           ;[09]      [25] [41]
 348:	d0 f2       	brcs	.-76     	; 0x2fe <stuffN1Delay>

0000034a <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 34a:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 34c:	28 f4       	brcc	.+10     	; 0x358 <doExor6>
    subi    x4, 1               ;[44]
 34e:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 350:	29 f4       	brne	.+10     	; 0x35c <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 352:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 354:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 356:	f9 cf       	rjmp	.-14     	; 0x34a <stuff6Delay>

00000358 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 358:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 35a:	56 e0       	ldi	r21, 0x06	; 6

0000035c <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 35c:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 35e:	0b bb       	out	0x1b, r16	; 27
    brcc    doExor7             ;[49]
 360:	20 f4       	brcc	.+8      	; 0x36a <doExor7>
    subi    x4, 1               ;[50]
 362:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 364:	21 f4       	brne	.+8      	; 0x36e <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 366:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 368:	f9 cf       	rjmp	.-14     	; 0x35c <common6>

0000036a <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 36a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 36c:	56 e0       	ldi	r21, 0x06	; 6

0000036e <common7>:
common7:
    ld      shift, y+           ;[53]
 36e:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 370:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 372:	0b bb       	out	0x1b, r16	; 27
    brne    txByteLoop          ;[57]
 374:	21 f6       	brne	.-120    	; 0x2fe <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 376:	07 77       	andi	r16, 0x77	; 119
    lds     x2, usbNewDeviceAddr;[59]
 378:	10 91 88 00 	lds	r17, 0x0088	; 0x800088 <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 37c:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 37e:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 380:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 382:	0b bb       	out	0x1b, r16	; 27
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 384:	11 f0       	breq	.+4      	; 0x38a <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 386:	10 93 82 00 	sts	0x0082, r17	; 0x800082 <usbDeviceAddr>

0000038a <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 38a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 38c:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 38e:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR          ;[06]
 390:	1a b3       	in	r17, 0x1a	; 26
    cbr     x2, USBMASK         ;[07] set both pins to input
 392:	17 77       	andi	r17, 0x77	; 119
    mov     x3, x1              ;[08]
 394:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 396:	47 77       	andi	r20, 0x77	; 119
    pop     x4                  ;[10]
 398:	5f 91       	pop	r21
    nop2                        ;[12]
 39a:	00 c0       	rjmp	.+0      	; 0x39c <skipAddrAssign+0x12>
    nop2                        ;[14]
 39c:	00 c0       	rjmp	.+0      	; 0x39e <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 39e:	0b bb       	out	0x1b, r16	; 27
    out     USBDDR, x2          ;[17] <-- release bus now
 3a0:	1a bb       	out	0x1a, r17	; 26
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3a2:	4b bb       	out	0x1b, r20	; 27
    rjmp    doReturn
 3a4:	71 cf       	rjmp	.-286    	; 0x288 <doReturn>

000003a6 <setup_pins>:

#define SEND_ZERO()        do { CLEAR_BIT(PORTA, PIN_GC); _delay_us(3); SET_BIT(PORTA, PIN_GC); _delay_us(1); } while(0)
#define SEND_ONE()         do { CLEAR_BIT(PORTA, PIN_GC); _delay_us(1); SET_BIT(PORTA, PIN_GC); _delay_us(3); } while(0)

void setup_pins(void) {
    CLEAR_BIT(DDRA, PIN_GC);		// Set PIN_GC as input, GCN data signal
 3a6:	d6 98       	cbi	0x1a, 6	; 26
    SET_BIT(PORTA, PIN_GC);		    // Enable pull-up resistor on PIN_GC
 3a8:	de 9a       	sbi	0x1b, 6	; 27
    SET_BIT(DDRA, PIN_DEBUG);       // Set PIN_DEBUG as output for debugging
 3aa:	d2 9a       	sbi	0x1a, 2	; 26

    // Ensure that USB pins are inputs with pullup resistor disabled
    CLEAR_BIT(DDRB, PB2);
 3ac:	ba 98       	cbi	0x17, 2	; 23
    CLEAR_BIT(DDRA, PA3);
 3ae:	d3 98       	cbi	0x1a, 3	; 26
    CLEAR_BIT(DDRA, PA7);
 3b0:	d7 98       	cbi	0x1a, 7	; 26
    CLEAR_BIT(PORTB, PB2);
 3b2:	c2 98       	cbi	0x18, 2	; 24
    CLEAR_BIT(PORTA, PA3);
 3b4:	db 98       	cbi	0x1b, 3	; 27
    CLEAR_BIT(PORTA, PA7);
 3b6:	df 98       	cbi	0x1b, 7	; 27
 3b8:	08 95       	ret

000003ba <enable_timer0>:
    SET_BIT(DDRA, PIN_TIMER);       // Set PIN_TIMER as output for compare matches
    #endif
}

void enable_timer0(void) {
    TCNT0 = 0;
 3ba:	12 be       	out	0x32, r1	; 50
    TIFR0 = 0xff;                   // Reset interrupt flags
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	88 bf       	out	0x38, r24	; 56
    // Set 0C0B(PA7) to toggle on match(COM0B=01)
    SET_BIT(TCCR0A, COM0B0);
    #endif

    // Enable Timer/Counter0 module at no prescaler
    SET_BIT(TCCR0B, CS00);
 3c0:	83 b7       	in	r24, 0x33	; 51
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	83 bf       	out	0x33, r24	; 51
 3c6:	08 95       	ret

000003c8 <disable_timer0>:
    // Set 0C0B(PA7) to toggle on match(COM0B=01)
    CLEAR_BIT(TCCR0A, COM0B0);
    #endif

    // Disable Timer/Counter0 module
    CLEAR_BIT(TCCR0B, CS00);
 3c8:	83 b7       	in	r24, 0x33	; 51
 3ca:	8e 7f       	andi	r24, 0xFE	; 254
 3cc:	83 bf       	out	0x33, r24	; 51
 3ce:	08 95       	ret

000003d0 <setup_timer0>:
}

// Set Timer/Counter0 in normal mode(WGM=000)
void setup_timer0(void) {
    disable_timer0();
 3d0:	fb df       	rcall	.-10     	; 0x3c8 <disable_timer0>

    // Set compare match to signal critical point(2us)
    OCR0A = 2e-6 * F_CPU;   // Triggers USI clock source
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	86 bf       	out	0x36, r24	; 54
 3d6:	08 95       	ret

000003d8 <enable_usi>:
    #endif
}

void enable_usi(void) {
    // Enable Universal Serial Module in Two-wire mode(USIWM=10)
    SET_BIT(USICR, USIWM1);
 3d8:	6d 9a       	sbi	0x0d, 5	; 13
 3da:	08 95       	ret

000003dc <disable_usi>:
}

void disable_usi(void) {
    // Disable Universal Serial Module
    SET_BIT(USICR, USIWM1);
 3dc:	6d 9a       	sbi	0x0d, 5	; 13
 3de:	08 95       	ret

000003e0 <setup_usi>:
}

void setup_usi(void) {
    // Set clock source to Timer/Counter0 Compare Match(USICS=01)
    SET_BIT(USICR, USICS0);
 3e0:	6a 9a       	sbi	0x0d, 2	; 13
 3e2:	08 95       	ret

000003e4 <setup_usb>:
}

void setup_usb(void) {
    cli();
 3e4:	f8 94       	cli
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 3e6:	9e e0       	ldi	r25, 0x0E	; 14
 3e8:	88 e1       	ldi	r24, 0x18	; 24
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	f8 94       	cli
 3ee:	a8 95       	wdr
 3f0:	81 bd       	out	0x21, r24	; 33
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	91 bd       	out	0x21, r25	; 33
    wdt_enable(WDTO_1S);    // enable 1s watchdog timer
    usbInit();
 3f6:	0b d3       	rcall	.+1558   	; 0xa0e <usbInit>

    usbDeviceDisconnect();  // enforce re-enumeration
 3f8:	d3 9a       	sbi	0x1a, 3	; 26
 3fa:	8a ef       	ldi	r24, 0xFA	; 250
    uint8_t i;
    for(i = 0; i<250; i++) {
        wdt_reset();
 3fc:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	e3 ef       	ldi	r30, 0xF3	; 243
 400:	f1 e0       	ldi	r31, 0x01	; 1
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	81 50       	subi	r24, 0x01	; 1
    wdt_enable(WDTO_1S);    // enable 1s watchdog timer
    usbInit();

    usbDeviceDisconnect();  // enforce re-enumeration
    uint8_t i;
    for(i = 0; i<250; i++) {
 40c:	b9 f7       	brne	.-18     	; 0x3fc <setup_usb+0x18>
        wdt_reset();
        _delay_ms(2);
    }
    usbDeviceConnect();
 40e:	d3 98       	cbi	0x1a, 3	; 26
    sei();
 410:	78 94       	sei
 412:	08 95       	ret

00000414 <init_controller>:
}

void init_controller(void) {
    SET_BIT(PORTA, PIN_GC);         // Set positive output on PIN_GC
 414:	de 9a       	sbi	0x1b, 6	; 27
    SET_BIT(DDRA, PIN_GC);          // Set PIN_GC as output
 416:	d6 9a       	sbi	0x1a, 6	; 26
 418:	88 e0       	ldi	r24, 0x08	; 8

    // Send controller init message (000000001)
    for(uint8_t bit = 0; bit < 8; bit++) {
        SEND_ZERO();
 41a:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	00 c0       	rjmp	.+0      	; 0x41e <init_controller+0xa>
 41e:	00 00       	nop
 420:	de 9a       	sbi	0x1b, 6	; 27
 422:	00 00       	nop
 424:	81 50       	subi	r24, 0x01	; 1
void init_controller(void) {
    SET_BIT(PORTA, PIN_GC);         // Set positive output on PIN_GC
    SET_BIT(DDRA, PIN_GC);          // Set PIN_GC as output

    // Send controller init message (000000001)
    for(uint8_t bit = 0; bit < 8; bit++) {
 426:	c9 f7       	brne	.-14     	; 0x41a <init_controller+0x6>
        SEND_ZERO();
    }
    SEND_ONE();
 428:	de 98       	cbi	0x1b, 6	; 27
 42a:	00 00       	nop
 42c:	de 9a       	sbi	0x1b, 6	; 27
 42e:	00 c0       	rjmp	.+0      	; 0x430 <init_controller+0x1c>
 430:	00 00       	nop

    CLEAR_BIT(DDRA, PIN_GC);        // Set PIN_GC as input
 432:	d6 98       	cbi	0x1a, 6	; 26
 434:	08 95       	ret

00000436 <request_message>:
}

uint8_t request_message(uint8_t *message_buffer) {
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	8c 01       	movw	r16, r24
    uint8_t cur_byte = 0;

    USISR = 0b11101000;             // Reset USI Interrupt flags and set timer value to 8
 43e:	88 ee       	ldi	r24, 0xE8	; 232
 440:	8e b9       	out	0x0e, r24	; 14
    disable_usi();
 442:	cc df       	rcall	.-104    	; 0x3dc <disable_usi>
    disable_timer0();
 444:	c1 df       	rcall	.-126    	; 0x3c8 <disable_timer0>

    asm("nop; nop; nop;");
 446:	00 00       	nop

    SET_BIT(DDRA, PIN_GC);          // Set PIN_GC as output
 448:	d6 9a       	sbi	0x1a, 6	; 26
    CLEAR_BIT(PORTA, PIN_GC);
 44a:	de 98       	cbi	0x1b, 6	; 27

    // Send controller data request
    SEND_ZERO(); SEND_ONE();  SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO();
 44c:	de 98       	cbi	0x1b, 6	; 27
 44e:	00 c0       	rjmp	.+0      	; 0x450 <request_message+0x1a>
 450:	00 00       	nop
 452:	de 9a       	sbi	0x1b, 6	; 27
 454:	00 00       	nop
 456:	de 98       	cbi	0x1b, 6	; 27
 458:	00 00       	nop
 45a:	de 9a       	sbi	0x1b, 6	; 27
 45c:	00 c0       	rjmp	.+0      	; 0x45e <request_message+0x28>
 45e:	00 00       	nop
 460:	de 98       	cbi	0x1b, 6	; 27
 462:	00 c0       	rjmp	.+0      	; 0x464 <request_message+0x2e>
 464:	00 00       	nop
 466:	de 9a       	sbi	0x1b, 6	; 27
 468:	00 00       	nop
 46a:	de 98       	cbi	0x1b, 6	; 27
 46c:	00 c0       	rjmp	.+0      	; 0x46e <request_message+0x38>
 46e:	00 00       	nop
 470:	de 9a       	sbi	0x1b, 6	; 27
 472:	00 00       	nop
 474:	de 98       	cbi	0x1b, 6	; 27
 476:	00 c0       	rjmp	.+0      	; 0x478 <request_message+0x42>
 478:	00 00       	nop
 47a:	de 9a       	sbi	0x1b, 6	; 27
 47c:	00 00       	nop
 47e:	de 98       	cbi	0x1b, 6	; 27
 480:	00 c0       	rjmp	.+0      	; 0x482 <request_message+0x4c>
 482:	00 00       	nop
 484:	de 9a       	sbi	0x1b, 6	; 27
 486:	00 00       	nop
 488:	de 98       	cbi	0x1b, 6	; 27
 48a:	00 c0       	rjmp	.+0      	; 0x48c <request_message+0x56>
 48c:	00 00       	nop
 48e:	de 9a       	sbi	0x1b, 6	; 27
 490:	00 00       	nop
 492:	de 98       	cbi	0x1b, 6	; 27
 494:	00 c0       	rjmp	.+0      	; 0x496 <request_message+0x60>
 496:	00 00       	nop
 498:	de 9a       	sbi	0x1b, 6	; 27
 49a:	00 00       	nop
    SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ONE();  SEND_ONE();
 49c:	de 98       	cbi	0x1b, 6	; 27
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <request_message+0x6a>
 4a0:	00 00       	nop
 4a2:	de 9a       	sbi	0x1b, 6	; 27
 4a4:	00 00       	nop
 4a6:	de 98       	cbi	0x1b, 6	; 27
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <request_message+0x74>
 4aa:	00 00       	nop
 4ac:	de 9a       	sbi	0x1b, 6	; 27
 4ae:	00 00       	nop
 4b0:	de 98       	cbi	0x1b, 6	; 27
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <request_message+0x7e>
 4b4:	00 00       	nop
 4b6:	de 9a       	sbi	0x1b, 6	; 27
 4b8:	00 00       	nop
 4ba:	de 98       	cbi	0x1b, 6	; 27
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <request_message+0x88>
 4be:	00 00       	nop
 4c0:	de 9a       	sbi	0x1b, 6	; 27
 4c2:	00 00       	nop
 4c4:	de 98       	cbi	0x1b, 6	; 27
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <request_message+0x92>
 4c8:	00 00       	nop
 4ca:	de 9a       	sbi	0x1b, 6	; 27
 4cc:	00 00       	nop
 4ce:	de 98       	cbi	0x1b, 6	; 27
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <request_message+0x9c>
 4d2:	00 00       	nop
 4d4:	de 9a       	sbi	0x1b, 6	; 27
 4d6:	00 00       	nop
 4d8:	de 98       	cbi	0x1b, 6	; 27
 4da:	00 00       	nop
 4dc:	de 9a       	sbi	0x1b, 6	; 27
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <request_message+0xaa>
 4e0:	00 00       	nop
 4e2:	de 98       	cbi	0x1b, 6	; 27
 4e4:	00 00       	nop
 4e6:	de 9a       	sbi	0x1b, 6	; 27
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <request_message+0xb4>
 4ea:	00 00       	nop
    SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ZERO(); SEND_ONE();  SEND_ZERO();
 4ec:	de 98       	cbi	0x1b, 6	; 27
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <request_message+0xba>
 4f0:	00 00       	nop
 4f2:	de 9a       	sbi	0x1b, 6	; 27
 4f4:	00 00       	nop
 4f6:	de 98       	cbi	0x1b, 6	; 27
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <request_message+0xc4>
 4fa:	00 00       	nop
 4fc:	de 9a       	sbi	0x1b, 6	; 27
 4fe:	00 00       	nop
 500:	de 98       	cbi	0x1b, 6	; 27
 502:	00 c0       	rjmp	.+0      	; 0x504 <request_message+0xce>
 504:	00 00       	nop
 506:	de 9a       	sbi	0x1b, 6	; 27
 508:	00 00       	nop
 50a:	de 98       	cbi	0x1b, 6	; 27
 50c:	00 c0       	rjmp	.+0      	; 0x50e <request_message+0xd8>
 50e:	00 00       	nop
 510:	de 9a       	sbi	0x1b, 6	; 27
 512:	00 00       	nop
 514:	de 98       	cbi	0x1b, 6	; 27
 516:	00 c0       	rjmp	.+0      	; 0x518 <request_message+0xe2>
 518:	00 00       	nop
 51a:	de 9a       	sbi	0x1b, 6	; 27
 51c:	00 00       	nop
 51e:	de 98       	cbi	0x1b, 6	; 27
 520:	00 c0       	rjmp	.+0      	; 0x522 <request_message+0xec>
 522:	00 00       	nop
 524:	de 9a       	sbi	0x1b, 6	; 27
 526:	00 00       	nop
 528:	de 98       	cbi	0x1b, 6	; 27
 52a:	00 00       	nop
 52c:	de 9a       	sbi	0x1b, 6	; 27
 52e:	00 c0       	rjmp	.+0      	; 0x530 <request_message+0xfa>
 530:	00 00       	nop
 532:	de 98       	cbi	0x1b, 6	; 27
 534:	00 c0       	rjmp	.+0      	; 0x536 <request_message+0x100>
 536:	00 00       	nop
 538:	de 9a       	sbi	0x1b, 6	; 27
 53a:	00 00       	nop
    SEND_ZERO();
 53c:	de 98       	cbi	0x1b, 6	; 27
 53e:	00 c0       	rjmp	.+0      	; 0x540 <request_message+0x10a>
 540:	00 00       	nop
 542:	de 9a       	sbi	0x1b, 6	; 27
 544:	00 00       	nop

    SET_BIT(PORTA, PIN_GC);
 546:	de 9a       	sbi	0x1b, 6	; 27
    CLEAR_BIT(DDRA, PIN_GC);        // Set PIN_GC as input
 548:	d6 98       	cbi	0x1a, 6	; 26

    // Start reading the message
    enable_usi();
 54a:	46 df       	rcall	.-372    	; 0x3d8 <enable_usi>
    enable_timer0();
 54c:	36 df       	rcall	.-404    	; 0x3ba <enable_timer0>

    CLEAR_BIT(DDRA, PIN_GC);        // Set PIN_GC as input
}

uint8_t request_message(uint8_t *message_buffer) {
    uint8_t cur_byte = 0;
 54e:	c0 e0       	ldi	r28, 0x00	; 0
                disable_timer0();
                return 1;
            }
        }
        // Reset Timer0, a little higher than 0 to account for polling delay
        TCNT0 = 5;
 550:	85 e0       	ldi	r24, 0x05	; 5
 552:	10 c0       	rjmp	.+32     	; 0x574 <request_message+0x13e>
	
        // Wait for signal to go low
        while(GET_BIT(PINA, PIN_GC)) {
            // Catch a timer overflow as an exit condition
            // This occurs if the signal is high for > 255 cycles
            if(GET_BIT(TIFR0, TOV0)) {
 554:	08 b6       	in	r0, 0x38	; 56
 556:	00 fe       	sbrs	r0, 0
 558:	0d c0       	rjmp	.+26     	; 0x574 <request_message+0x13e>
                // Exit condition
                disable_usi();
 55a:	40 df       	rcall	.-384    	; 0x3dc <disable_usi>

                // Wait for the timer to overflow and loop once, fixes 'every other' corruption
                while(TCNT0 < 24) {}
 55c:	82 b7       	in	r24, 0x32	; 50
 55e:	88 31       	cpi	r24, 0x18	; 24
 560:	e8 f3       	brcs	.-6      	; 0x55c <request_message+0x126>

                // Check if there's no signal on the line
                if(cur_byte == 0) {
 562:	c1 11       	cpse	r28, r1
 564:	04 c0       	rjmp	.+8      	; 0x56e <request_message+0x138>
                    SET_BIT(PORTA, PIN_DEBUG);
 566:	da 9a       	sbi	0x1b, 2	; 27
                    CLEAR_BIT(PORTA, PIN_DEBUG);
 568:	da 98       	cbi	0x1b, 2	; 27
                    return 0;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	15 c0       	rjmp	.+42     	; 0x598 <request_message+0x162>
                }

                disable_timer0();
 56e:	2c df       	rcall	.-424    	; 0x3c8 <disable_timer0>
                return 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	12 c0       	rjmp	.+36     	; 0x598 <request_message+0x162>
    enable_usi();
    enable_timer0();
    while(1) {
	
        // Wait for signal to go low
        while(GET_BIT(PINA, PIN_GC)) {
 574:	ce 99       	sbic	0x19, 6	; 25
 576:	ee cf       	rjmp	.-36     	; 0x554 <request_message+0x11e>
                disable_timer0();
                return 1;
            }
        }
        // Reset Timer0, a little higher than 0 to account for polling delay
        TCNT0 = 5;
 578:	82 bf       	out	0x32, r24	; 50

        if(GET_BIT(USISR, USIOIF)) {
 57a:	76 9b       	sbis	0x0e, 6	; 14
 57c:	0a c0       	rjmp	.+20     	; 0x592 <request_message+0x15c>
            // Skip the counter to 8 of 16
            SET_BIT(USISR, USICNT3);
 57e:	73 9a       	sbi	0x0e, 3	; 14

            // Store the byte from the serial buffer
            message_buffer[cur_byte] = USIBR;
 580:	90 b3       	in	r25, 0x10	; 16
 582:	f8 01       	movw	r30, r16
 584:	ec 0f       	add	r30, r28
 586:	f1 1d       	adc	r31, r1
 588:	90 83       	st	Z, r25
            cur_byte++;
 58a:	cf 5f       	subi	r28, 0xFF	; 255

            // Toggle the debug pin
            SET_BIT(PORTA, PIN_DEBUG);
 58c:	da 9a       	sbi	0x1b, 2	; 27
            CLEAR_BIT(PORTA, PIN_DEBUG);
 58e:	da 98       	cbi	0x1b, 2	; 27

            // Clear the overflow counter
            SET_BIT(USISR, USIOIF);
 590:	76 9a       	sbi	0x0e, 6	; 14
        }

        // Make sure signal is high before looping
        // Hardware should pull up DIN or risk an infinite loop
        while(!GET_BIT(PINA, PIN_GC)) {}
 592:	ce 9b       	sbis	0x19, 6	; 25
 594:	fe cf       	rjmp	.-4      	; 0x592 <request_message+0x15c>
 596:	ee cf       	rjmp	.-36     	; 0x574 <request_message+0x13e>
    }

    // Unreachable code
    return 0;
}
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <main>:

int main(void)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	28 97       	sbiw	r28, 0x08	; 8
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
    setup_pins();
 5b4:	f8 de       	rcall	.-528    	; 0x3a6 <setup_pins>
    setup_timer0();
 5b6:	0c df       	rcall	.-488    	; 0x3d0 <setup_timer0>
    setup_usi();
 5b8:	13 df       	rcall	.-474    	; 0x3e0 <setup_usi>
    setup_usb();
 5ba:	14 df       	rcall	.-472    	; 0x3e4 <setup_usb>
    init_controller();
 5bc:	2b df       	rcall	.-426    	; 0x414 <init_controller>

    uint8_t retry_count = 0;

    uint8_t message_buffer[8] = {0};
 5be:	fe 01       	movw	r30, r28
 5c0:	31 96       	adiw	r30, 0x01	; 1
 5c2:	88 e0       	ldi	r24, 0x08	; 8
 5c4:	df 01       	movw	r26, r30
 5c6:	1d 92       	st	X+, r1
 5c8:	8a 95       	dec	r24
 5ca:	e9 f7       	brne	.-6      	; 0x5c6 <main+0x26>

    while(1) {
        usbPoll();
        wdt_reset();

        if(usbInterruptIsReady()) {
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f6 e7       	ldi	r31, 0x76	; 118
 5d0:	ef 2e       	mov	r14, r31
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	ff 2e       	mov	r15, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	6e 01       	movw	r12, r28
 5da:	b9 e0       	ldi	r27, 0x09	; 9
 5dc:	cb 0e       	add	r12, r27
 5de:	d1 1c       	adc	r13, r1
            // Zero out input array
            for(uint8_t i = 0; i < 8; ++i) {
                message_buffer[i] = 0xf0;
 5e0:	00 ef       	ldi	r16, 0xF0	; 240
            }
            // Try to grab the controller state
            retry_count = GCN_RETRY_LIMIT;
            while(retry_count--) {
                if(request_message(message_buffer)) {
 5e2:	5f 01       	movw	r10, r30
 5e4:	8e 2e       	mov	r8, r30
 5e6:	9b 2c       	mov	r9, r11

    uint8_t message_buffer[8] = {0};
    Controller *controller = (Controller*)message_buffer;

    while(1) {
        usbPoll();
 5e8:	f1 d0       	rcall	.+482    	; 0x7cc <usbPoll>
        wdt_reset();
 5ea:	a8 95       	wdr

        if(usbInterruptIsReady()) {
 5ec:	d7 01       	movw	r26, r14
 5ee:	8c 91       	ld	r24, X
 5f0:	84 ff       	sbrs	r24, 4
 5f2:	fa cf       	rjmp	.-12     	; 0x5e8 <main+0x48>
 5f4:	fe 01       	movw	r30, r28
 5f6:	31 96       	adiw	r30, 0x01	; 1
            // Zero out input array
            for(uint8_t i = 0; i < 8; ++i) {
                message_buffer[i] = 0xf0;
 5f8:	01 93       	st	Z+, r16
        usbPoll();
        wdt_reset();

        if(usbInterruptIsReady()) {
            // Zero out input array
            for(uint8_t i = 0; i < 8; ++i) {
 5fa:	ce 16       	cp	r12, r30
 5fc:	df 06       	cpc	r13, r31
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x58>
 600:	15 e0       	ldi	r17, 0x05	; 5
                message_buffer[i] = 0xf0;
            }
            // Try to grab the controller state
            retry_count = GCN_RETRY_LIMIT;
            while(retry_count--) {
                if(request_message(message_buffer)) {
 602:	88 2d       	mov	r24, r8
 604:	99 2d       	mov	r25, r9
 606:	17 df       	rcall	.-466    	; 0x436 <request_message>
 608:	88 23       	and	r24, r24
 60a:	71 f0       	breq	.+28     	; 0x628 <main+0x88>
                    build_report(controller, &reportBuffer);
 60c:	63 e6       	ldi	r22, 0x63	; 99
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	c5 01       	movw	r24, r10
 612:	21 d0       	rcall	.+66     	; 0x656 <build_report>
                    usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 614:	68 e0       	ldi	r22, 0x08	; 8
 616:	83 e6       	ldi	r24, 0x63	; 99
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	b6 d0       	rcall	.+364    	; 0x788 <usbSetInterrupt>
                    if(reportBuffer.rx == 255) {
 61c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <reportBuffer+0x5>
 620:	8f 3f       	cpi	r24, 0xFF	; 255
 622:	11 f7       	brne	.-60     	; 0x5e8 <main+0x48>
 624:	00 00       	nop
 626:	e0 cf       	rjmp	.-64     	; 0x5e8 <main+0x48>
 628:	11 50       	subi	r17, 0x01	; 1
            for(uint8_t i = 0; i < 8; ++i) {
                message_buffer[i] = 0xf0;
            }
            // Try to grab the controller state
            retry_count = GCN_RETRY_LIMIT;
            while(retry_count--) {
 62a:	59 f7       	brne	.-42     	; 0x602 <main+0x62>
 62c:	dd cf       	rjmp	.-70     	; 0x5e8 <main+0x48>

0000062e <usbFunctionSetup>:
    0x95, 0x06,                    //   REPORT_COUNT (6)
    0x81, 0x02,                    //   INPUT (Data,Var,Abs)
    0xc0                           //   END_COLLECTION
};

usbMsgLen_t usbFunctionSetup(uchar data[8]) {
 62e:	fc 01       	movw	r30, r24
    usbRequest_t *rq = (void *)data;

    // The following requests are never used. But since they are required by
    // the specification, we implement them in this example.
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) {
 630:	90 81       	ld	r25, Z
 632:	90 76       	andi	r25, 0x60	; 96
 634:	90 32       	cpi	r25, 0x20	; 32
 636:	59 f4       	brne	.+22     	; 0x64e <usbFunctionSetup+0x20>
        if(rq->bRequest == USBRQ_HID_GET_REPORT) {
 638:	81 81       	ldd	r24, Z+1	; 0x01
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	51 f4       	brne	.+20     	; 0x652 <usbFunctionSetup+0x24>
            // wValue: ReportType (highbyte), ReportID (lowbyte)
            usbMsgPtr = (void *)&reportBuffer; // we only have this one
 63e:	83 e6       	ldi	r24, 0x63	; 99
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 646:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
            return sizeof(reportBuffer);
 64a:	88 e0       	ldi	r24, 0x08	; 8
 64c:	08 95       	ret
        }
    }
    return 0;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	80 e0       	ldi	r24, 0x00	; 0
}
 654:	08 95       	ret

00000656 <build_report>:

void build_report(Controller *controller, report_t *report) {
 656:	dc 01       	movw	r26, r24
 658:	fb 01       	movw	r30, r22
    if(CONTROLLER_A(*controller))
 65a:	13 96       	adiw	r26, 0x03	; 3
 65c:	8c 91       	ld	r24, X
 65e:	13 97       	sbiw	r26, 0x03	; 3
 660:	80 ff       	sbrs	r24, 0
 662:	06 c0       	rjmp	.+12     	; 0x670 <build_report+0x1a>
        report->buttonMask |= (1 << 0);
 664:	80 81       	ld	r24, Z
 666:	91 81       	ldd	r25, Z+1	; 0x01
 668:	81 60       	ori	r24, 0x01	; 1
 66a:	91 83       	std	Z+1, r25	; 0x01
 66c:	80 83       	st	Z, r24
 66e:	05 c0       	rjmp	.+10     	; 0x67a <build_report+0x24>
    else
        report->buttonMask &= ~(1 << 0);
 670:	80 81       	ld	r24, Z
 672:	91 81       	ldd	r25, Z+1	; 0x01
 674:	8e 7f       	andi	r24, 0xFE	; 254
 676:	91 83       	std	Z+1, r25	; 0x01
 678:	80 83       	st	Z, r24

    if(CONTROLLER_X(*controller))
 67a:	13 96       	adiw	r26, 0x03	; 3
 67c:	8c 91       	ld	r24, X
 67e:	13 97       	sbiw	r26, 0x03	; 3
 680:	82 ff       	sbrs	r24, 2
 682:	06 c0       	rjmp	.+12     	; 0x690 <build_report+0x3a>
        report->buttonMask |= (1 << 1);
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	82 60       	ori	r24, 0x02	; 2
 68a:	91 83       	std	Z+1, r25	; 0x01
 68c:	80 83       	st	Z, r24
 68e:	05 c0       	rjmp	.+10     	; 0x69a <build_report+0x44>
    else
        report->buttonMask &= ~(1 << 1);
 690:	80 81       	ld	r24, Z
 692:	91 81       	ldd	r25, Z+1	; 0x01
 694:	8d 7f       	andi	r24, 0xFD	; 253
 696:	91 83       	std	Z+1, r25	; 0x01
 698:	80 83       	st	Z, r24

    if(CONTROLLER_B(*controller))
 69a:	13 96       	adiw	r26, 0x03	; 3
 69c:	8c 91       	ld	r24, X
 69e:	13 97       	sbiw	r26, 0x03	; 3
 6a0:	81 ff       	sbrs	r24, 1
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <build_report+0x5a>
        report->buttonMask |= (1 << 2);
 6a4:	80 81       	ld	r24, Z
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	84 60       	ori	r24, 0x04	; 4
 6aa:	91 83       	std	Z+1, r25	; 0x01
 6ac:	80 83       	st	Z, r24
 6ae:	05 c0       	rjmp	.+10     	; 0x6ba <build_report+0x64>
    else
        report->buttonMask &= ~(1 << 2);
 6b0:	80 81       	ld	r24, Z
 6b2:	91 81       	ldd	r25, Z+1	; 0x01
 6b4:	8b 7f       	andi	r24, 0xFB	; 251
 6b6:	91 83       	std	Z+1, r25	; 0x01
 6b8:	80 83       	st	Z, r24

    if(CONTROLLER_Y(*controller))
 6ba:	13 96       	adiw	r26, 0x03	; 3
 6bc:	8c 91       	ld	r24, X
 6be:	13 97       	sbiw	r26, 0x03	; 3
 6c0:	83 ff       	sbrs	r24, 3
 6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <build_report+0x7a>
        report->buttonMask |= (1 << 3);
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	88 60       	ori	r24, 0x08	; 8
 6ca:	91 83       	std	Z+1, r25	; 0x01
 6cc:	80 83       	st	Z, r24
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <build_report+0x84>
    else
        report->buttonMask &= ~(1 << 3);
 6d0:	80 81       	ld	r24, Z
 6d2:	91 81       	ldd	r25, Z+1	; 0x01
 6d4:	87 7f       	andi	r24, 0xF7	; 247
 6d6:	91 83       	std	Z+1, r25	; 0x01
 6d8:	80 83       	st	Z, r24

    if(controller->analog_r > 128)
 6da:	1a 96       	adiw	r26, 0x0a	; 10
 6dc:	8c 91       	ld	r24, X
 6de:	1a 97       	sbiw	r26, 0x0a	; 10
 6e0:	81 38       	cpi	r24, 0x81	; 129
 6e2:	30 f0       	brcs	.+12     	; 0x6f0 <build_report+0x9a>
        report->buttonMask |= (1 << 4);
 6e4:	80 81       	ld	r24, Z
 6e6:	91 81       	ldd	r25, Z+1	; 0x01
 6e8:	80 61       	ori	r24, 0x10	; 16
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
 6ee:	05 c0       	rjmp	.+10     	; 0x6fa <build_report+0xa4>
    else
        report->buttonMask &= ~(1 << 4);
 6f0:	80 81       	ld	r24, Z
 6f2:	91 81       	ldd	r25, Z+1	; 0x01
 6f4:	8f 7e       	andi	r24, 0xEF	; 239
 6f6:	91 83       	std	Z+1, r25	; 0x01
 6f8:	80 83       	st	Z, r24

    if(controller->analog_l > 128)
 6fa:	19 96       	adiw	r26, 0x09	; 9
 6fc:	8c 91       	ld	r24, X
 6fe:	19 97       	sbiw	r26, 0x09	; 9
 700:	81 38       	cpi	r24, 0x81	; 129
 702:	30 f0       	brcs	.+12     	; 0x710 <build_report+0xba>
        report->buttonMask |= (1 << 5);
 704:	80 81       	ld	r24, Z
 706:	91 81       	ldd	r25, Z+1	; 0x01
 708:	80 62       	ori	r24, 0x20	; 32
 70a:	91 83       	std	Z+1, r25	; 0x01
 70c:	80 83       	st	Z, r24
 70e:	05 c0       	rjmp	.+10     	; 0x71a <build_report+0xc4>
    else
        report->buttonMask &= ~(1 << 5);
 710:	80 81       	ld	r24, Z
 712:	91 81       	ldd	r25, Z+1	; 0x01
 714:	8f 7d       	andi	r24, 0xDF	; 223
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24

    if(CONTROLLER_D_UP(*controller))
 71a:	13 96       	adiw	r26, 0x03	; 3
 71c:	8d 91       	ld	r24, X+
 71e:	9c 91       	ld	r25, X
 720:	14 97       	sbiw	r26, 0x04	; 4
 722:	93 ff       	sbrs	r25, 3
 724:	06 c0       	rjmp	.+12     	; 0x732 <build_report+0xdc>
        report->buttonMask |= (1 << 6);
 726:	80 81       	ld	r24, Z
 728:	91 81       	ldd	r25, Z+1	; 0x01
 72a:	80 64       	ori	r24, 0x40	; 64
 72c:	91 83       	std	Z+1, r25	; 0x01
 72e:	80 83       	st	Z, r24
 730:	05 c0       	rjmp	.+10     	; 0x73c <build_report+0xe6>
    else
        report->buttonMask &= ~(1 << 6);
 732:	80 81       	ld	r24, Z
 734:	91 81       	ldd	r25, Z+1	; 0x01
 736:	8f 7b       	andi	r24, 0xBF	; 191
 738:	91 83       	std	Z+1, r25	; 0x01
 73a:	80 83       	st	Z, r24

    if(CONTROLLER_START(*controller))
 73c:	13 96       	adiw	r26, 0x03	; 3
 73e:	8c 91       	ld	r24, X
 740:	13 97       	sbiw	r26, 0x03	; 3
 742:	84 ff       	sbrs	r24, 4
 744:	06 c0       	rjmp	.+12     	; 0x752 <build_report+0xfc>
        report->buttonMask |= (1 << 7);
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	80 68       	ori	r24, 0x80	; 128
 74c:	91 83       	std	Z+1, r25	; 0x01
 74e:	80 83       	st	Z, r24
 750:	05 c0       	rjmp	.+10     	; 0x75c <build_report+0x106>
    else
        report->buttonMask &= ~(1 << 7);
 752:	80 81       	ld	r24, Z
 754:	91 81       	ldd	r25, Z+1	; 0x01
 756:	8f 77       	andi	r24, 0x7F	; 127
 758:	91 83       	std	Z+1, r25	; 0x01
 75a:	80 83       	st	Z, r24

    report->x = controller->joy_x;
 75c:	15 96       	adiw	r26, 0x05	; 5
 75e:	8c 91       	ld	r24, X
 760:	15 97       	sbiw	r26, 0x05	; 5
 762:	82 83       	std	Z+2, r24	; 0x02
    report->y = -(controller->joy_y);
 764:	16 96       	adiw	r26, 0x06	; 6
 766:	8c 91       	ld	r24, X
 768:	16 97       	sbiw	r26, 0x06	; 6
 76a:	81 95       	neg	r24
 76c:	83 83       	std	Z+3, r24	; 0x03
    //report->z = -(controller->analog_r)/2 + 128;
    //report->rx = -(controller->analog_l)/2 + 128;
    report->z = 100;
 76e:	84 e6       	ldi	r24, 0x64	; 100
 770:	84 83       	std	Z+4, r24	; 0x04
    report->rx = 128;
 772:	80 e8       	ldi	r24, 0x80	; 128
 774:	85 83       	std	Z+5, r24	; 0x05
    report->ry = controller->c_x;
 776:	17 96       	adiw	r26, 0x07	; 7
 778:	8c 91       	ld	r24, X
 77a:	17 97       	sbiw	r26, 0x07	; 7
 77c:	86 83       	std	Z+6, r24	; 0x06
    report->rz = -(controller->c_y);
 77e:	18 96       	adiw	r26, 0x08	; 8
 780:	8c 91       	ld	r24, X
 782:	81 95       	neg	r24
 784:	87 83       	std	Z+7, r24	; 0x07
 786:	08 95       	ret

00000788 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 788:	cf 93       	push	r28
 78a:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 78c:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <usbTxStatus1>
 790:	24 ff       	sbrs	r18, 4
 792:	07 c0       	rjmp	.+14     	; 0x7a2 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 794:	e6 e7       	ldi	r30, 0x76	; 118
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	31 81       	ldd	r19, Z+1	; 0x01
 79a:	28 e8       	ldi	r18, 0x88	; 136
 79c:	23 27       	eor	r18, r19
 79e:	21 83       	std	Z+1, r18	; 0x01
 7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 7a2:	2a e5       	ldi	r18, 0x5A	; 90
 7a4:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <usbTxStatus1>
 7a8:	e8 2f       	mov	r30, r24
 7aa:	f9 2f       	mov	r31, r25
 7ac:	a8 e7       	ldi	r26, 0x78	; 120
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 7b0:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 7b2:	91 91       	ld	r25, Z+
 7b4:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 7b6:	81 50       	subi	r24, 0x01	; 1
 7b8:	e1 f7       	brne	.-8      	; 0x7b2 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 7ba:	6c 2f       	mov	r22, r28
 7bc:	88 e7       	ldi	r24, 0x78	; 120
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	b4 dc       	rcall	.-1688   	; 0x12a <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 7c2:	cc 5f       	subi	r28, 0xFC	; 252
 7c4:	c0 93 76 00 	sts	0x0076, r28	; 0x800076 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 7d0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <usbRxLen>
 7d4:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 7d6:	0a f4       	brpl	.+2      	; 0x7da <usbPoll+0xe>
 7d8:	b4 c0       	rjmp	.+360    	; 0x942 <usbPoll+0x176>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 7da:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <usbRxToken>
 7de:	9d 32       	cpi	r25, 0x2D	; 45
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <usbPoll+0x18>
 7e2:	ad c0       	rjmp	.+346    	; 0x93e <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 7e4:	88 30       	cpi	r24, 0x08	; 8
 7e6:	09 f0       	breq	.+2      	; 0x7ea <usbPoll+0x1e>
 7e8:	aa c0       	rjmp	.+340    	; 0x93e <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 7ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <usbInputBufOffset>
 7ee:	cc e0       	ldi	r28, 0x0C	; 12
 7f0:	d0 e0       	ldi	r29, 0x00	; 0
 7f2:	c8 1b       	sub	r28, r24
 7f4:	d1 09       	sbc	r29, r1
 7f6:	c5 57       	subi	r28, 0x75	; 117
 7f8:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 7fa:	83 ec       	ldi	r24, 0xC3	; 195
 7fc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 800:	8a e5       	ldi	r24, 0x5A	; 90
 802:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
        usbMsgFlags = 0;
 806:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 80a:	88 81       	ld	r24, Y
 80c:	80 76       	andi	r24, 0x60	; 96
 80e:	19 f0       	breq	.+6      	; 0x816 <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 810:	ce 01       	movw	r24, r28
 812:	0d df       	rcall	.-486    	; 0x62e <usbFunctionSetup>
 814:	8b c0       	rjmp	.+278    	; 0x92c <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 816:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 818:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 81c:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 81e:	81 11       	cpse	r24, r1
 820:	06 c0       	rjmp	.+12     	; 0x82e <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 822:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 826:	24 e7       	ldi	r18, 0x74	; 116
 828:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	7b c0       	rjmp	.+246    	; 0x924 <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 82e:	85 30       	cpi	r24, 0x05	; 5
 830:	31 f4       	brne	.+12     	; 0x83e <usbPoll+0x72>
        usbNewDeviceAddr = value;
 832:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 836:	24 e7       	ldi	r18, 0x74	; 116
 838:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	73 c0       	rjmp	.+230    	; 0x924 <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 83e:	86 30       	cpi	r24, 0x06	; 6
 840:	09 f0       	breq	.+2      	; 0x844 <usbPoll+0x78>
 842:	50 c0       	rjmp	.+160    	; 0x8e4 <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 844:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	41 f4       	brne	.+16     	; 0x85a <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 84a:	84 e7       	ldi	r24, 0x74	; 116
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 852:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 856:	82 e1       	ldi	r24, 0x12	; 18
 858:	41 c0       	rjmp	.+130    	; 0x8dc <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 85a:	82 30       	cpi	r24, 0x02	; 2
 85c:	41 f4       	brne	.+16     	; 0x86e <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 85e:	82 e5       	ldi	r24, 0x52	; 82
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 866:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 86a:	82 e2       	ldi	r24, 0x22	; 34
 86c:	37 c0       	rjmp	.+110    	; 0x8dc <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 86e:	83 30       	cpi	r24, 0x03	; 3
 870:	f1 f4       	brne	.+60     	; 0x8ae <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 872:	91 11       	cpse	r25, r1
 874:	08 c0       	rjmp	.+16     	; 0x886 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 876:	84 ec       	ldi	r24, 0xC4	; 196
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 87e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 882:	84 e0       	ldi	r24, 0x04	; 4
 884:	2b c0       	rjmp	.+86     	; 0x8dc <usbPoll+0x110>
        SWITCH_CASE(1)
 886:	91 30       	cpi	r25, 0x01	; 1
 888:	41 f4       	brne	.+16     	; 0x89a <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 88a:	8a e9       	ldi	r24, 0x9A	; 154
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 892:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 896:	8a e2       	ldi	r24, 0x2A	; 42
 898:	21 c0       	rjmp	.+66     	; 0x8dc <usbPoll+0x110>
        SWITCH_CASE(2)
 89a:	92 30       	cpi	r25, 0x02	; 2
 89c:	e1 f4       	brne	.+56     	; 0x8d6 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 89e:	86 e8       	ldi	r24, 0x86	; 134
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 8a6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 8aa:	84 e1       	ldi	r24, 0x14	; 20
 8ac:	17 c0       	rjmp	.+46     	; 0x8dc <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 8ae:	81 32       	cpi	r24, 0x21	; 33
 8b0:	41 f4       	brne	.+16     	; 0x8c2 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 8b2:	84 e6       	ldi	r24, 0x64	; 100
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 8ba:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 8be:	89 e0       	ldi	r24, 0x09	; 9
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 8c2:	82 32       	cpi	r24, 0x22	; 34
 8c4:	51 f4       	brne	.+20     	; 0x8da <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 8c6:	82 e2       	ldi	r24, 0x22	; 34
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <usbMsgPtr+0x1>
 8ce:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <usbMsgPtr>
 8d2:	80 e3       	ldi	r24, 0x30	; 48
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <usbPoll+0x110>
 8da:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 8dc:	90 e4       	ldi	r25, 0x40	; 64
 8de:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 8e2:	24 c0       	rjmp	.+72     	; 0x92c <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 8e4:	88 30       	cpi	r24, 0x08	; 8
 8e6:	99 f0       	breq	.+38     	; 0x90e <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 8e8:	89 30       	cpi	r24, 0x09	; 9
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <usbPoll+0x12c>
        usbConfiguration = value;
 8ec:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 8f0:	24 e7       	ldi	r18, 0x74	; 116
 8f2:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	16 c0       	rjmp	.+44     	; 0x924 <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 8f8:	8a 30       	cpi	r24, 0x0A	; 10
 8fa:	69 f0       	breq	.+26     	; 0x916 <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 8fc:	8b 30       	cpi	r24, 0x0B	; 11
 8fe:	79 f4       	brne	.+30     	; 0x91e <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 900:	8b e4       	ldi	r24, 0x4B	; 75
 902:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 906:	24 e7       	ldi	r18, 0x74	; 116
 908:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	0b c0       	rjmp	.+22     	; 0x924 <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 90e:	2a e8       	ldi	r18, 0x8A	; 138
 910:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	07 c0       	rjmp	.+14     	; 0x924 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 916:	24 e7       	ldi	r18, 0x74	; 116
 918:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	03 c0       	rjmp	.+6      	; 0x924 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 91e:	24 e7       	ldi	r18, 0x74	; 116
 920:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 922:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 924:	30 93 86 00 	sts	0x0086, r19	; 0x800086 <usbMsgPtr+0x1>
 928:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 92c:	9f 81       	ldd	r25, Y+7	; 0x07
 92e:	91 11       	cpse	r25, r1
 930:	04 c0       	rjmp	.+8      	; 0x93a <usbPoll+0x16e>
 932:	9e 81       	ldd	r25, Y+6	; 0x06
 934:	98 17       	cp	r25, r24
 936:	08 f4       	brcc	.+2      	; 0x93a <usbPoll+0x16e>
 938:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 93a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 93e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 942:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
 946:	84 ff       	sbrs	r24, 4
 948:	4b c0       	rjmp	.+150    	; 0x9e0 <usbPoll+0x214>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 94a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 94e:	8f 3f       	cpi	r24, 0xFF	; 255
 950:	09 f4       	brne	.+2      	; 0x954 <usbPoll+0x188>
 952:	46 c0       	rjmp	.+140    	; 0x9e0 <usbPoll+0x214>
 954:	c8 2f       	mov	r28, r24
 956:	89 30       	cpi	r24, 0x09	; 9
 958:	08 f0       	brcs	.+2      	; 0x95c <usbPoll+0x190>
 95a:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 95c:	8c 1b       	sub	r24, r28
 95e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 962:	eb e6       	ldi	r30, 0x6B	; 107
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	90 81       	ld	r25, Z
 968:	88 e8       	ldi	r24, 0x88	; 136
 96a:	89 27       	eor	r24, r25
 96c:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 96e:	cc 23       	and	r28, r28
 970:	09 f4       	brne	.+2      	; 0x974 <usbPoll+0x1a8>
 972:	44 c0       	rjmp	.+136    	; 0x9fc <usbPoll+0x230>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 974:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <usbMsgPtr>
 978:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 97c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 980:	86 ff       	sbrs	r24, 6
 982:	10 c0       	rjmp	.+32     	; 0x9a4 <usbPoll+0x1d8>
 984:	ac e6       	ldi	r26, 0x6C	; 108
 986:	b0 e0       	ldi	r27, 0x00	; 0
 988:	f9 01       	movw	r30, r18
 98a:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 98c:	94 91       	lpm	r25, Z
                    *data++ = c;
 98e:	9d 93       	st	X+, r25
                    r++;
 990:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 992:	81 50       	subi	r24, 0x01	; 1
 994:	d9 f7       	brne	.-10     	; 0x98c <usbPoll+0x1c0>
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	8c 0f       	add	r24, r28
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	28 0f       	add	r18, r24
 9a0:	39 1f       	adc	r19, r25
 9a2:	0e c0       	rjmp	.+28     	; 0x9c0 <usbPoll+0x1f4>
 9a4:	d9 01       	movw	r26, r18
 9a6:	ec e6       	ldi	r30, 0x6C	; 108
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 9aa:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 9ac:	9d 91       	ld	r25, X+
 9ae:	91 93       	st	Z+, r25
                }while(--i);
 9b0:	81 50       	subi	r24, 0x01	; 1
 9b2:	e1 f7       	brne	.-8      	; 0x9ac <usbPoll+0x1e0>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	8c 0f       	add	r24, r28
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	01 96       	adiw	r24, 0x01	; 1
 9bc:	28 0f       	add	r18, r24
 9be:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 9c0:	30 93 86 00 	sts	0x0086, r19	; 0x800086 <usbMsgPtr+0x1>
 9c4:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 9c8:	6c 2f       	mov	r22, r28
 9ca:	8c e6       	ldi	r24, 0x6C	; 108
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	ad db       	rcall	.-2214   	; 0x12a <usbCrc16Append>
        len += 4;           /* length including sync byte */
 9d0:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 9d2:	cc 30       	cpi	r28, 0x0C	; 12
 9d4:	18 f4       	brcc	.+6      	; 0x9dc <usbPoll+0x210>
            usbMsgLen = USB_NO_MSG;
 9d6:	8f ef       	ldi	r24, 0xFF	; 255
 9d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 9dc:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9e0:	89 b3       	in	r24, 0x19	; 25
        if(usbLineStatus != 0)  /* SE0 has ended */
 9e2:	88 78       	andi	r24, 0x88	; 136
 9e4:	89 f4       	brne	.+34     	; 0xa08 <usbPoll+0x23c>
 9e6:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 9e8:	89 b3       	in	r24, 0x19	; 25
        if(usbLineStatus != 0)  /* SE0 has ended */
 9ea:	88 78       	andi	r24, 0x88	; 136
 9ec:	69 f4       	brne	.+26     	; 0xa08 <usbPoll+0x23c>
 9ee:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 9f0:	d9 f7       	brne	.-10     	; 0x9e8 <usbPoll+0x21c>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 9f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 9f6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <usbPoll+0x23c>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 9fc:	6c 2f       	mov	r22, r28
 9fe:	8c e6       	ldi	r24, 0x6C	; 108
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	93 db       	rcall	.-2266   	; 0x12a <usbCrc16Append>
        len += 4;           /* length including sync byte */
 a04:	cc 5f       	subi	r28, 0xFC	; 252
 a06:	e7 cf       	rjmp	.-50     	; 0x9d6 <usbPoll+0x20a>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 a08:	df 91       	pop	r29
 a0a:	cf 91       	pop	r28
 a0c:	08 95       	ret

00000a0e <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 a0e:	85 b7       	in	r24, 0x35	; 53
 a10:	82 60       	ori	r24, 0x02	; 2
 a12:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 a14:	8b b7       	in	r24, 0x3b	; 59
 a16:	80 64       	ori	r24, 0x40	; 64
 a18:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 a1a:	e6 e7       	ldi	r30, 0x76	; 118
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	8b e4       	ldi	r24, 0x4B	; 75
 a20:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 a22:	8a e5       	ldi	r24, 0x5A	; 90
 a24:	80 83       	st	Z, r24
 a26:	08 95       	ret

00000a28 <_exit>:
 a28:	f8 94       	cli

00000a2a <__stop_program>:
 a2a:	ff cf       	rjmp	.-2      	; 0xa2a <__stop_program>
